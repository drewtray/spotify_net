[
  {
    "objectID": "prepmodel.html",
    "href": "prepmodel.html",
    "title": "Prepare tracks for model endpoint",
    "section": "",
    "text": "Use the class to prepare a list of tracks and their associated features for use in model prediction.\n\nsource\n\nModelPrep\n\n ModelPrep ()\n\nA class for preparing data for a Spotify recommendation model.\n\nsource\n\n\nModelPrep.load_scaler\n\n ModelPrep.load_scaler ()\n\nLoads the scaler object from S3.\n\nsource\n\n\nModelPrep.load_svd\n\n ModelPrep.load_svd ()\n\nLoads the SVD object from S3.\n\nsource\n\n\nModelPrep.load_tracks_data\n\n ModelPrep.load_tracks_data ()\n\nLoads the Spotify and Last.fm tracks data and merges them.\n\nsource\n\n\nModelPrep.load_genre_series\n\n ModelPrep.load_genre_series ()\n\nLoads the genre series data from S3.\n\nsource\n\n\nModelPrep.load_key_series\n\n ModelPrep.load_key_series ()\n\nLoads the key series data from S3.\n\nsource\n\n\nModelPrep.load_time_signature_series\n\n ModelPrep.load_time_signature_series ()\n\nLoads the time signature series data from S3.\n\nsource\n\n\nModelPrep.load_s3\n\n ModelPrep.load_s3 ()\n\nLoads all necessary data from S3.\n\nsource\n\n\nModelPrep.transform_features\n\n ModelPrep.transform_features (constant)\n\nTransforms the features of the prepped DataFrame.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nconstant\nfloat\nThe constant to add to ‘speechiness’, ‘acousticness’, and ‘instrumentalness’ before log-transforming.\n\n\nReturns\nNone\n\n\n\n\n\nsource\n\n\nModelPrep.update_dataframe_with_prefix\n\n ModelPrep.update_dataframe_with_prefix (current_dataframe, series,\n                                         prefix)\n\nUpdates the DataFrame with a one-hot encoded series.\n\n\n\n\nType\nDetails\n\n\n\n\ncurrent_dataframe\npandas.DataFrame\nThe DataFrame to update.\n\n\nseries\npandas.Series\nThe series to one-hot encode.\n\n\nprefix\nstr\nThe prefix to add to the column names.\n\n\nReturns\npandas.DataFrame\nThe updated DataFrame.\n\n\n\n\nsource\n\n\nModelPrep.prepare_final_frame\n\n ModelPrep.prepare_final_frame ()\n\nPrepares the final DataFrame for prediction.\n\nsource\n\n\nModelPrep.save_prepared_frame\n\n ModelPrep.save_prepared_frame ()\n\nSaves the prepared DataFrame to S3."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Install",
    "section": "",
    "text": "Spotify “Net”"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Install",
    "section": "How to use",
    "text": "How to use\nComing soon…"
  },
  {
    "objectID": "retrieve_last.html",
    "href": "retrieve_last.html",
    "title": "LastFM API Data Retrieval",
    "section": "",
    "text": "Use the class to pull recent tracks from Last FM, and include only those tracks above a certain playcount threshold.\n\nsource\n\nLastFmAPI\n\n LastFmAPI (region_name)\n\nProvides an interface to the Last.fm API for retrieving top tracks for a user.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nregion_name\nstr\nThe name of the AWS region where the secrets manager is located.\n\n\n\n\nsource\n\n\nLastFmAPI.get_secret\n\n LastFmAPI.get_secret (secret_name)\n\nRetrieves the specified secret from AWS Secrets Manager and sets the corresponding environment variables.\n\n\n\n\nType\nDetails\n\n\n\n\nsecret_name\nstr\nThe name of the secret to retrieve.\n\n\n\n\nsource\n\n\nLastFmAPI.get_top_tracks\n\n LastFmAPI.get_top_tracks (period='1month', playcount_cutoff=5)\n\nRetrieves the top tracks for the user.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nperiod\nstr\n1month\nThe time period for which to retrieve the top tracks. Default is ‘1month’.\n\n\nplaycount_cutoff\nint\n5\nThe minimum number of plays required for a track to be included in the results. Default is 1.\n\n\nReturns\npandas.DataFrame\n\nA DataFrame containing the top tracks for the user. The DataFrame has columns for the track name, artist name, and play count."
  },
  {
    "objectID": "retrieve_spotify_data.html",
    "href": "retrieve_spotify_data.html",
    "title": "Spotify API Data Retrieval",
    "section": "",
    "text": "Use the class to:\n\nPull features for a playlist\n\nParse playlist tracks by date added\n\nRemove old tracks\n\n\nsource\n\nSpotifyAPI\n\n SpotifyAPI (region_name)\n\nA class for interacting with the Spotify API.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nregion_name\nstr\nThe name of the AWS region where the secrets manager is located.\n\n\n\n\nsource\n\n\nSpotifyAPI.get_secret\n\n SpotifyAPI.get_secret (secret_name)\n\nRetrieves the specified secret from AWS Secrets Manager and sets the corresponding environment variables.\n\n\n\n\nType\nDetails\n\n\n\n\nsecret_name\nstr\nThe name of the secret to retrieve.\n\n\n\n\nsource\n\n\nSpotifyAPI.create_headers\n\n SpotifyAPI.create_headers ()\n\nCreates the headers required for making requests to the Spotify API.\n\nsource\n\n\nSpotifyAPI.refresh_token\n\n SpotifyAPI.refresh_token ()\n\nRefreshes the access token required for making requests to the Spotify API.\n\nsource\n\n\nSpotifyAPI.get_track_subset\n\n SpotifyAPI.get_track_subset (playlist_id, offset)\n\nRetrieves a subset of tracks from the specified Spotify playlist.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nplaylist_id\nstr\nThe ID of the Spotify playlist to retrieve tracks from.\n\n\noffset\nint\nThe offset to use when retrieving tracks.\n\n\nReturns\nlist\nA list of track items.\n\n\n\n\nsource\n\n\nSpotifyAPI.get_subset_features\n\n SpotifyAPI.get_subset_features (track_items)\n\nGiven a list of track items, returns a pandas DataFrame containing information about each track, including the track ID, name, artist, artist ID, and audio features such as danceability, energy, and tempo.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ntrack_items\nlist\nA list of track items, where each item is a dictionary containing information about a track.\n\n\nReturns\npandas.DataFrame\nA DataFrame containing information about each track, including the track ID, name, artist, artist ID, and audio features such as danceability, energy, and tempo.\n\n\n\n\nsource\n\n\nSpotifyAPI.get_playlist_features\n\n SpotifyAPI.get_playlist_features (playlist_id)\n\nGiven a Spotify playlist ID, returns a pandas DataFrame containing information about all the tracks in the playlist, including the track ID, name, artist, artist ID, and audio features such as danceability, energy, and tempo.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nplaylist_id\nstr\nThe ID of the Spotify playlist.\n\n\nReturns\npandas.DataFrame\nA DataFrame containing information about all the tracks in the playlist, including the track ID, name, artist, artist ID, and audio features such as danceability, energy, and tempo.\n\n\n\n\nsource\n\n\nSpotifyAPI.parse_new_tracks\n\n SpotifyAPI.parse_new_tracks (lookback_days=7)\n\nSorts tracks based on when they were added and filters out tracks added more than ‘lookback_days’ ago. Returns two DataFrames: one containing the new tracks added within the lookback period, and one containing the old tracks added before the lookback period.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nlookback_days\nint\n7\nThe number of days to look back for new tracks. Defaults to 7.\n\n\nReturns\npandas.DataFrame\n\nA DataFrame containing the old tracks added before the lookback period.\n\n\n\n\nsource\n\n\nSpotifyAPI.delete_tracks\n\n SpotifyAPI.delete_tracks (tracks_to_delete)\n\nDeletes a batch of tracks from a Spotify playlist.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ntracks_to_delete\npandas.DataFrame\nA DataFrame containing the tracks to be deleted, where each row represents a track and contains a ‘uri’ column with the URI of the track.\n\n\nReturns\nNone"
  }
]